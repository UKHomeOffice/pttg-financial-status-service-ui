eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgogIGJ1aWxkOgogICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHB0dGctZnMtdWkgLgogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKCiAgdGVzdDoKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBidWlsZCAtZiBEb2NrZXJmaWxlX3Rlc3QgLXQgdGVzdCAuCiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAoKICBwdXNoOgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK3B0dGciIC1wPSR7RE9DS0VSX1BBU1NXT1JEfSBxdWF5LmlvCiAgICAgIC0gZG9ja2VyIHRhZyBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvcHR0Zy1mcy11aToke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL3B0dGctZnMtdWk6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKICAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgZ2V0LWt1YmUtY29uZmlndXJhdGlvbi1kZXBsb3ltZW50OjoKICAgIGltYWdlOiBwbHVnaW5zL2dpdAogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vVUtIb21lT2ZmaWNlL2t1YmUtcHR0Zy1mcy11aS5naXQKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbcHVzaCwgZGVwbG95bWVudF0KICAgICAgYnJhbmNoOiBtYXN0ZXIKCiAgZGVwbG95LXRvLWRldjoKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6djAuMi4zCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgICAtIEtVQkVfTkFNRVNQQUNFPXB0LWktZGV2CiAgICAgIC0gRU5WSVJPTk1FTlQ9ZGV2CiAgICAgIC0gVkVSU0lPTj0ke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gS1VCRV9TRVJWRVJfREVWPWh0dHBzOi8va3ViZS1kZXYuZHNwLm5vdHByb2QuaG9tZW9mZmljZS5nb3YudWsKICAgIGNvbW1hbmRzOgogICAgICAtIGNkIGt1YmUtcHR0Zy1mcy11aQogICAgICAtIC4vZGVwbG95LnNoCiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAogICAgICBicmFuY2g6IG1hc3RlcgoKICBkZXBsb3ktdG8tdGVzdDoKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6djAuMi4zCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgICAtIEtVQkVfTkFNRVNQQUNFPXB0LWktdGVzdAogICAgICAtIEVOVklST05NRU5UPXRlc3QKICAgICAgLSBWRVJTSU9OPSR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBLVUJFX1NFUlZFUl9ERVY9aHR0cHM6Ly9rdWJlLWRldi5kc3Aubm90cHJvZC5ob21lb2ZmaWNlLmdvdi51awogICAgY29tbWFuZHM6CiAgICAgIC0gY2Qga3ViZS1wdHRnLWZzLXVpCiAgICAgIC0gLi9kZXBsb3kuc2gKICAgIHdoZW46CiAgICAgIGV2ZW50OiBkZXBsb3ltZW50CiAgICAgIGVudmlyb25tZW50OiB0ZXN0CgogIGRlcGxveS10by1wcmVwcm9kOgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9rZDp2MC4yLjMKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICAgIC0gS1VCRV9OQU1FU1BBQ0U9cHQtaS1wcmVwcm9kCiAgICAgIC0gRU5WSVJPTk1FTlQ9cHJlcHJvZAogICAgICAtIFZFUlNJT049JHtEUk9ORV9DT01NSVRfU0hBfQogICAgICAtIEtVQkVfU0VSVkVSX0RFVj1odHRwczovL2t1YmUtZGV2LmRzcC5ub3Rwcm9kLmhvbWVvZmZpY2UuZ292LnVrCiAgICBjb21tYW5kczoKICAgICAgLSBjZCBrdWJlLXB0dGctZnMtdWkKICAgICAgLSAuL2RlcGxveS5zaAogICAgd2hlbjoKICAgICAgZXZlbnQ6IGRlcGxveW1lbnQKICAgICAgZW52aXJvbm1lbnQ6IHByZXByb2QKCiAgZGVwbG95LXRvLXByb2Q6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tkOnYwLjIuMwogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgICAgLSBLVUJFX05BTUVTUEFDRT1wdC1pLXByb2QKICAgICAgLSBFTlZJUk9OTUVOVD1wcm9kCiAgICAgIC0gVkVSU0lPTj0ke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gS1VCRV9TRVJWRVJfUFJPRD1odHRwczovL2t1YmUuZHNwLmRpZ2l0YWwuaG9tZW9mZmljZS5nb3YudWsKICAgIGNvbW1hbmRzOgogICAgICAtIGNkIGt1YmUtcHR0Zy1mcy11aQogICAgICAtIC4vZGVwbG95LXByb2Quc2gKICAgIHdoZW46CiAgICAgIGV2ZW50OiBkZXBsb3ltZW50CiAgICAgIGVudmlyb25tZW50OiBwcm9kCgpzZXJ2aWNlczoKICBkaW5kOgogICAgaW1hZ2U6IGRvY2tlcjoxLjExLWRpbmQKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGNvbW1hbmQ6CiAgICAgIC0gIi1zIgogICAgICAtICJvdmVybGF5Igo.OfvEt3_OOEeE32Yy82aiJ8GZxAJB6qA7fo3d2HnhkFI